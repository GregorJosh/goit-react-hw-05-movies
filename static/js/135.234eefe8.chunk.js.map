{"version":3,"file":"static/js/135.234eefe8.chunk.js","mappings":"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","sources":["api/api.js","webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkYjg0NzNlZDkyMjFiZjUxZjY1ZjYyMzFmZWM1ZGNhNiIsInN1YiI6IjY0YjlhODFmMzAwOWFhMDBjNWI3OTc1MiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.-kZ0dgbGdwQSV2jydkgQdOLeOv-bFL8HeHwItjiQ9dk';\n\nconst host = 'api.themoviedb.org';\nconst base = 'https://' + host;\nconst path = '/3/';\nconst url = new URL(path, base);\n\nasync function sendRequest(path) {\n  try {\n    const response = await axios({\n      method: 'get',\n      url: url.href + path,\n      headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer ' + API_KEY,\n      },\n    });\n\n    if (response.status === 200) {\n      return response.data;\n    }\n  } catch (error) {\n    if (error.response) {\n      console.error(\n        'Axios: Request made but the server responded with an error.'\n      );\n    } else if (error.request) {\n      console.error(\n        'Axios: Request made but no response is received from the server.'\n      );\n    } else {\n      console.error('Axios: Error occured while setting up the request.');\n      console.error(error);\n    }\n  }\n}\n\nexport async function getTrendingMovies() {\n  const movies = await sendRequest('trending/movie/day');\n\n  return movies.results;\n}\n\nexport async function getMoviesByKeyword(keyword) {\n  const movies = await sendRequest('search/movie?query=' + keyword);\n\n  return movies.results;\n}\n\nexport async function getMovieById(movieId) {\n  const movie = await sendRequest('movie/' + movieId);\n\n  movie.poster_path = 'http://image.tmdb.org/t/p/w185' + movie.poster_path;\n\n  return movie;\n}\n\nexport async function getMovieCredits(movieId) {\n  const credits = await sendRequest(`movie/${movieId}/credits`);\n\n  return credits.cast.filter(cast => {\n    if (cast.profile_path === null) {\n      return false;\n    }\n\n    cast.profile_path = 'http://image.tmdb.org/t/p/w185' + cast.profile_path;\n\n    return true;\n  });\n}\n\nexport async function getMovieReviews(movieId) {\n  const reviews = await sendRequest(`movie/${movieId}/reviews`);\n\n  return reviews.results;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"MovieDetails_card__pqAte\",\"content\":\"MovieDetails_content__xdW74\",\"filters\":\"MovieDetails_filters__Yt4RW\",\"links\":\"MovieDetails_links__EzCWB\",\"link\":\"MovieDetails_link__U+v+7\",\"active\":\"MovieDetails_active__uPNdW MovieDetails_link__U+v+7\",\"details\":\"MovieDetails_details__TGlfg\"};","import { useEffect, useState } from 'react';\nimport {\n  useLocation,\n  useParams,\n  Link,\n  NavLink,\n  Outlet,\n} from 'react-router-dom';\n\nimport { getMovieById } from 'api/api';\n\nimport styles from './MovieDetails.module.css';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState({\n    poster_path: '',\n    title: '',\n    release_date: '',\n    vote_average: '',\n    overview: '',\n    genres: [],\n  });\n\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHRef = location.state?.from ?? '/';\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movie;\n  const { card, content, links, link, active, filters, details } = styles;\n\n  const setClass = ({ isActive }) => (isActive ? active : link);\n\n  useEffect(() => {\n    getMovieById(movieId).then(newMovie => setMovie(newMovie));\n  }, [movieId]);\n\n  return (\n    <>\n      <Link className={link} to={backLinkHRef}>\n        &larr; Go Back\n      </Link>\n      <section className={card}>\n        <img src={poster_path} alt={`${title} movie poster`} />\n        <div className={content}>\n          <header>\n            <h1>{`${title} (${release_date})`}</h1>\n            <p>User score: {vote_average}</p>\n          </header>\n          <div>\n            <h3>Overview: </h3>\n            <p>{overview}</p>\n          </div>\n          <div>\n            <h3>Genres: </h3>\n            <p>{genres.map(genre => genre.name + ' ')}</p>\n          </div>\n        </div>\n      </section>\n      <div className={filters}>\n        <p>Additional information: </p>\n        <ul className={links}>\n          <li>\n            <NavLink\n              className={setClass}\n              to=\"cast\"\n              state={{ from: backLinkHRef }}\n            >\n              Cast\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              className={setClass}\n              to=\"reviews\"\n              state={{ from: backLinkHRef }}\n            >\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n      <section className={details}>\n        <Outlet />\n      </section>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["API_KEY","url","URL","sendRequest","path","axios","method","href","headers","accept","Authorization","response","status","data","console","error","request","getTrendingMovies","movies","results","getMoviesByKeyword","keyword","getMovieById","movieId","movie","poster_path","getMovieCredits","credits","cast","filter","profile_path","getMovieReviews","reviews","useState","title","release_date","vote_average","overview","genres","setMovie","useParams","backLinkHRef","useLocation","state","from","card","styles","content","links","link","active","filters","details","setClass","isActive","useEffect","then","newMovie","className","to","src","alt","map","genre","name"],"sourceRoot":""}