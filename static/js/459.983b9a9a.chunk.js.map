{"version":3,"file":"static/js/459.983b9a9a.chunk.js","mappings":"+SAEMA,EACJ,sNAKIC,EAAM,IAAIC,IADH,MADA,8BAEb,SAEeC,EAAY,GAAZA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BC,GAA3B,iGAE2BC,EAAAA,EAAAA,GAAM,CAC3BC,OAAQ,MACRL,IAAKA,EAAIM,KAAOH,EAChBI,QAAS,CACPC,OAAQ,mBACRC,cAAe,UAAYV,KAPnC,UAW4B,OATlBW,EAFV,QAWiBC,OAXjB,yCAYaD,EAASE,MAZtB,uDAeQ,KAAMF,SACRG,QAAQC,MACN,+DAEO,KAAMC,QACfF,QAAQC,MACN,qEAGFD,QAAQC,MAAM,sDACdD,QAAQC,MAAR,OAzBN,iFA8BO,SAAeE,IAAtB,4CAAO,OAAP,oBAAO,oGACgBd,EAAY,sBAD5B,cACCe,EADD,yBAGEA,EAAOC,SAHT,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,uFACgBlB,EAAY,sBAAwBkB,GADpD,cACCH,EADD,yBAGEA,EAAOC,SAHT,kEAMA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,uFACepB,EAAY,SAAWoB,GADtC,cACCC,EADD,QAGCC,YAAc,iCAAmCD,EAAMC,YAHxD,kBAKED,GALF,kEAQA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,uFACiBpB,EAAY,SAAD,OAAUoB,EAAV,aAD5B,cACCI,EADD,yBAGEA,EAAQC,KAAKC,QAAO,SAAAD,GACzB,OAA0B,OAAtBA,EAAKE,eAITF,EAAKE,aAAe,iCAAmCF,EAAKE,cAErD,EACR,KAXI,kEAcA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BR,GAA/B,uFACiBpB,EAAY,SAAD,OAAUoB,EAAV,aAD5B,cACCS,EADD,yBAGEA,EAAQb,SAHV,kE,2GCzEP,EAAuB,mB,SC4BvB,EAtBa,WACX,IAAQI,GAAYU,EAAAA,EAAAA,MAAZV,QACR,GAAwBW,EAAAA,EAAAA,UAAS,IAAjC,eAAON,EAAP,KAAaO,EAAb,KAEQC,EAASC,EAMjB,OAJAC,EAAAA,EAAAA,YAAU,YACRZ,EAAAA,EAAAA,IAAgBH,GAASgB,MAAK,SAAAZ,GAAO,OAAIQ,EAAQR,EAAZ,GACtC,GAAE,CAACJ,KAGF,eAAIiB,UAAWJ,EAAf,SACGR,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWb,EAApB,EAAoBA,aAApB,OACR,2BACE,gBAAKc,IAAKd,EAAce,IAAKH,KAC7B,uBAAIA,MAFGC,EADD,KAQf,C","sources":["api/api.js","webpack://goit-react-hw-05-movies/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY =\n  'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkYjg0NzNlZDkyMjFiZjUxZjY1ZjYyMzFmZWM1ZGNhNiIsInN1YiI6IjY0YjlhODFmMzAwOWFhMDBjNWI3OTc1MiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.-kZ0dgbGdwQSV2jydkgQdOLeOv-bFL8HeHwItjiQ9dk';\n\nconst host = 'api.themoviedb.org';\nconst base = 'https://' + host;\nconst path = '/3/';\nconst url = new URL(path, base);\n\nasync function sendRequest(path) {\n  try {\n    const response = await axios({\n      method: 'get',\n      url: url.href + path,\n      headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer ' + API_KEY,\n      },\n    });\n\n    if (response.status === 200) {\n      return response.data;\n    }\n  } catch (error) {\n    if (error.response) {\n      console.error(\n        'Axios: Request made but the server responded with an error.'\n      );\n    } else if (error.request) {\n      console.error(\n        'Axios: Request made but no response is received from the server.'\n      );\n    } else {\n      console.error('Axios: Error occured while setting up the request.');\n      console.error(error);\n    }\n  }\n}\n\nexport async function getTrendingMovies() {\n  const movies = await sendRequest('trending/movie/day');\n\n  return movies.results;\n}\n\nexport async function getMoviesByKeyword(keyword) {\n  const movies = await sendRequest('search/movie?query=' + keyword);\n\n  return movies.results;\n}\n\nexport async function getMovieById(movieId) {\n  const movie = await sendRequest('movie/' + movieId);\n\n  movie.poster_path = 'http://image.tmdb.org/t/p/w185' + movie.poster_path;\n\n  return movie;\n}\n\nexport async function getMovieCredits(movieId) {\n  const credits = await sendRequest(`movie/${movieId}/credits`);\n\n  return credits.cast.filter(cast => {\n    if (cast.profile_path === null) {\n      return false;\n    }\n\n    cast.profile_path = 'http://image.tmdb.org/t/p/w185' + cast.profile_path;\n\n    return true;\n  });\n}\n\nexport async function getMovieReviews(movieId) {\n  const reviews = await sendRequest(`movie/${movieId}/reviews`);\n\n  return reviews.results;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__oOD41\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCredits } from 'api/api';\n\nimport styles from './Cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  const { list } = styles;\n\n  useEffect(() => {\n    getMovieCredits(movieId).then(credits => setCast(credits));\n  }, [movieId]);\n\n  return (\n    <ul className={list}>\n      {cast.map(({ name, credit_id, profile_path }) => (\n        <li key={credit_id}>\n          <img src={profile_path} alt={name} />\n          <p>{name}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","url","URL","sendRequest","path","axios","method","href","headers","accept","Authorization","response","status","data","console","error","request","getTrendingMovies","movies","results","getMoviesByKeyword","keyword","getMovieById","movieId","movie","poster_path","getMovieCredits","credits","cast","filter","profile_path","getMovieReviews","reviews","useParams","useState","setCast","list","styles","useEffect","then","className","map","name","credit_id","src","alt"],"sourceRoot":""}